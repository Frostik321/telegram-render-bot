import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters, CallbackQueryHandler

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("TOKEN is not set")

TASKS = []

def get_user_active_task(user_name):
    for i, task in enumerate(TASKS):
        if task["status"] == "–∑–∞–π–Ω—è—Ç–∞" and task["by"] == user_name:
            return i
    return None

def start(update: Update, context: CallbackContext):
    update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! /new ‚Äì –¥–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É, /list ‚Äì –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –∑–∞–¥–∞—á—ñ.")

def new_task(update: Update, context: CallbackContext):
    if context.args:
        task_text = " ".join(context.args)
        TASKS.append({"text": task_text, "status": "–≤—ñ–ª—å–Ω–∞", "by": None, "proof": None})
        update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á—É –¥–æ–¥–∞–Ω–æ: {task_text}")
    else:
        update.message.reply_text("‚ùóÔ∏è–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /new –æ–ø–∏—Å –∑–∞–¥–∞—á—ñ")

def list_tasks(update: Update, context: CallbackContext):
    if not TASKS:
        return update.message.reply_text("üîç –ü–æ–∫–∏ —â–æ –∑–∞–¥–∞—á –Ω–µ–º–∞—î.")
    for i, task in enumerate(TASKS):
        stat = "üü¢ –í—ñ–ª—å–Ω–∞" if task["status"]=="–≤—ñ–ª—å–Ω–∞" else f"üî¥ –ó–∞–π–Ω—è—Ç–∞: {task['by']}" if task["status"]=="–∑–∞–π–Ω—è—Ç–∞" else f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {task['by']}"
        msg = f"üìå {task['text']}\n–°—Ç–∞—Ç—É—Å: {stat}"
        if task["proof"]: msg += f"\nüìé –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {task['proof']}"
        btn = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É", callback_data=f"take_{i}")]]) if task["status"]=="–≤—ñ–ª—å–Ω–∞" else None
        update.message.reply_text(msg, reply_markup=btn)

def button_cb(update: Update, context: CallbackContext):
    q = update.callback_query; q.answer()
    idx = int(q.data.split("_")[1])
    task = TASKS[idx]
    if task["status"] != "–≤—ñ–ª—å–Ω–∞":
        q.edit_message_text(f"‚ö†Ô∏è –ó–∞–π–Ω—è—Ç–æ: {task['by']}")
        return
    task["status"] = "–∑–∞–π–Ω—è—Ç–∞"
    task["by"] = q.from_user.first_name
    q.edit_message_text(f"üõ†Ô∏è {task['text']}\nüîí –í–∑—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É: {task['by']}")

def proof(update: Update, context: CallbackContext):
    u = update.message.from_user.first_name
    idx = get_user_active_task(u)
    if idx is None:
        return update.message.reply_text("‚ùóÔ∏è–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á.")
    task = TASKS[idx]
    if update.message.text:
        proof_text = update.message.text
    elif update.message.photo:
        proof_text = f"[—Ñ–æ—Ç–æ –≤—ñ–¥ {u}]"
    elif update.message.document:
        proof_text = f"[—Ñ–∞–π–ª: {update.message.document.file_name}]"
    else:
        proof_text = "[–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è]"
    task["proof"] = proof_text
    task["status"] = "–≤–∏–∫–æ–Ω–∞–Ω–æ"
    update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞: {task['text']}\nüìé {proof_text}")

def main():
    updater = Updater(TOKEN, use_context=True)_
