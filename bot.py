import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters, CallbackQueryHandler

TOKEN = os.getenv("TOKEN")
TASKS = []

def start(update: Update, context: CallbackContext):
    update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ö–æ–º–∞–Ω–¥–∏:\n/new <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ>\n/list ‚Äì —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n/pending ‚Äì –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É\n/pay <—Å—É–º–∞> ‚Äì —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–ø–ª–∞—Ç—É")

def new_task(update: Update, context: CallbackContext):
    if not context.args:
        return update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /new <–æ–ø–∏—Å –∑–∞–¥–∞—á—ñ>")
    text = " ".join(context.args)
    TASKS.append({"text": text, "status": "–≤—ñ–ª—å–Ω–∞", "by": [], "proof": [], "approved": False})
    update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–¥–∞—á—É: {text}")

def list_tasks(update: Update, context: CallbackContext):
    if not TASKS:
        return update.message.reply_text("–ó–∞–¥–∞—á –Ω–µ–º–∞—î.")
    for i, t in enumerate(TASKS):
        s = t["status"]
        workers = ", ".join(t["by"]) if t["by"] else "-"
        msg = f"üìå {t['text']}\nüë• –í–∏–∫–æ–Ω—É—é—Ç—å: {workers}\nüìé –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å: {len(t['proof'])}\n‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: {t['approved']}\n–°—Ç–∞—Ç—É—Å: {s}"
        if s == "–≤—ñ–ª—å–Ω–∞":
            btn = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏", callback_data=f"take_{i}")]])
        else:
            btn = None
        update.message.reply_text(msg, reply_markup=btn)

def button_cb(update: Update, context: CallbackContext):
    q = update.callback_query
    q.answer()
    if q.data.startswith("take_"):
        i = int(q.data.split("_")[1])
        user = q.from_user.first_name
        if TASKS[i]["status"] == "–≤—ñ–ª—å–Ω–∞":
            TASKS[i]["status"] = "–≤ —Ä–æ–±–æ—Ç—ñ"
            TASKS[i]["by"].append(user)
        elif user not in TASKS[i]["by"]:
            TASKS[i]["by"].append(user)
        q.edit_message_text(f"üîß –ó–∞–¥–∞—á–∞: {TASKS[i]['text']}\nüë• –¢–µ–ø–µ—Ä –≤–∏–∫–æ–Ω—É—î: {', '.join(TASKS[i]['by'])}")

def proof(update: Update, context: CallbackContext):
    user = update.message.from_user.first_name
    for i, t in enumerate(TASKS):
        if user in t["by"] and t["status"] == "–≤ —Ä–æ–±–æ—Ç—ñ":
            text = update.message.text or "[—Ñ–∞–π–ª/—Ñ–æ—Ç–æ]"
            if update.message.photo:
                text = "[–§–æ—Ç–æ]"
            elif update.message.document:
                text = f"[–§–∞–π–ª: {update.message.document.file_name}]"
            t["proof"].append(f"{user}: {text}")
            t["status"] = "–æ—á—ñ–∫—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
            update.message.reply_text(f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á—ñ: {t['text']}")
            return
    update.message.reply_text("‚ùóÔ∏è–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ –∞–±–æ –≤–æ–Ω–∞ –≤–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è.")

def pending(update: Update, context: CallbackContext):
    for i, t in enumerate(TASKS):
        if t["status"] == "–æ—á—ñ–∫—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏" and not t["approved"]:
            msg = f"üïµ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–¥–∞—á—ñ: {t['text']}\nüë• –í–∏–∫–æ–Ω–∞–≤—Ü—ñ: {', '.join(t['by'])}\nüìé –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:"
            for p in t["proof"]:
                msg += f"\n‚Äî {p}"
            btn = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"approve_{i}"),
                 InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{i}")]
            ])
            update.message.reply_text(msg, reply_markup=btn)

def approve_reject_cb(update: Update, context: CallbackContext):
    q = update.callback_query
    q.answer()
    if q.data.startswith("approve_") or q.data.startswith("reject_"):
        i = int(q.data.split("_")[1])
        decision = q.data.split("_")[0]
        TASKS[i]["approved"] = (decision == "approve")
        TASKS[i]["status"] = "–≤–∏–∫–æ–Ω–∞–Ω–æ" if decision == "approve" else "–≤ —Ä–æ–±–æ—Ç—ñ"
        text = "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ" if decision == "approve" else "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ"
        q.edit_message_text(f"{text} –∑–∞–¥–∞—á–∞: {TASKS[i]['text']}")

def pay(update: Update, context: CallbackContext):
    if not context.args or not context.args[0].isdigit():
        return update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /pay <—Å—É–º–∞>")
    total = int(context.args[0])
    for t in TASKS:
        if t["status"] == "–≤–∏–∫–æ–Ω–∞–Ω–æ" and t["approved"]:
            count = len(t["by"])
            if count == 1:
                percent = 80
            elif count == 2:
                percent = 40
            else:
                percent = 30
            share = round(total * percent / 100, 2)
            msg = f"üí∏ –û–ø–ª–∞—Ç–∞ –∑–∞–¥–∞—á—ñ: {t['text']}\n"
            for u in t["by"]:
                msg += f"‚Äî {u}: {share}‚Ç¨\n"
            update.message.reply_text(msg)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("new", new_task))
    dp.add_handler(CommandHandler("list", list_tasks))
    dp.add_handler(CommandHandler("pending", pending))
    dp.add_handler(CommandHandler("pay", pay))
    dp.add_handler(CallbackQueryHandler(button_cb, pattern="^take_"))
    dp.add_handler(CallbackQueryHandler(approve_reject_cb, pattern="^(approve|reject)_"))
    dp.add_handler(MessageHandler(Filters.text | Filters.photo | Filters.document, proof))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
